#define ubyte uint8_t
#define uword uint16_t
/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on Sat Apr 27 20:46:01 CDT 2019.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_-
 */

/**
 * @defgroup DB_- CAN Database -
 *
 * Path to file: -
 *
 * Provides the following ECUs:
 * - \ref ECU_AEM_EMS_4
 * - \ref ECU_DATALOGGER
 * - \ref ECU_DATALOGGER_2
 * - \ref ECU_DATALOGGER_19
 */

/**
 * @defgroup ECU_AEM_EMS_4 Electronics Control Unit AEM_EMS_4
 *
 * This ECU was defined in \ref DB_-.
 *
 * TX messages:
 * - \ref MSG_AEMEngine3
 * - \ref MSG_AEMEngine2
 * - \ref MSG_AEMEngine1
 * - \ref MSG_AEMEngine0
 *
 * RX signals:
 *
 * @ingroup DB_-
 */

/**
 * @defgroup ECU_DATALOGGER Electronics Control Unit DATALOGGER
 *
 * This ECU was defined in \ref DB_-.
 *
 * TX messages:
 * - \ref MSG_DataLogger0
 *
 * RX signals:
 *
 * @ingroup DB_-
 */

/**
 * @defgroup ECU_DATALOGGER_2 Electronics Control Unit DATALOGGER_2
 *
 * This ECU was defined in \ref DB_-.
 *
 * TX messages:
 * - \ref MSG_DataLogger1
 *
 * RX signals:
 *
 * @ingroup DB_-
 */

/**
 * @defgroup ECU_DATALOGGER_19 Electronics Control Unit DATALOGGER_19
 *
 * This ECU was defined in \ref DB_-.
 *
 * TX messages:
 * - \ref MSG_DataLogger3
 *
 * RX signals:
 *
 * @ingroup DB_-
 */

/**
 * @defgroup MSG_DataLogger3 Message DataLogger3 (0x1f0a006)
 *
 * Sent by \ref ECU_DATALOGGER_19.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_DataLogger3_Analog1
 * - \ref SIG_DataLogger3_Analog2
 * - \ref SIG_DataLogger3_Analog3
 * - \ref SIG_DataLogger3_Analog4
 * - \ref SIG_DataLogger3_Analog5
 * - \ref SIG_DataLogger3_Analog6
 *
 * @ingroup ECU_DATALOGGER_19
 * @{
 */

/**
 * Message DataLogger3 configuration tuple.
 */
#define MSG_DataLogger3                             0x1f0a006, 1, 8

/**
 * Message DataLogger3 id.
 */
#define ID_DataLogger3                              0x1f0a006

/**
 * Message DataLogger3 extended id bit.
 */
#define EXT_DataLogger3                             1

/**
 * Message DataLogger3 Data Length Count.
 */
#define DLC_DataLogger3                             8

/**
 * Message DataLogger3 cycle time.
 */
#define CYCLE_DataLogger3                           20

/**
 * Message DataLogger3 fast cycle time.
 */
#define FAST_DataLogger3                            0

/**
 * Initialise message DataLogger3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_DataLogger3(buf) { \
	INITSIG_DataLogger3_Analog1(buf); \
	INITSIG_DataLogger3_Analog2(buf); \
	INITSIG_DataLogger3_Analog3(buf); \
	INITSIG_DataLogger3_Analog4(buf); \
	INITSIG_DataLogger3_Analog5(buf); \
	INITSIG_DataLogger3_Analog6(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_DataLogger1 Message DataLogger1 (0x1f0a005)
 *
 * Sent by \ref ECU_DATALOGGER_2.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_DataLogger1_WheelCounts1
 * - \ref SIG_DataLogger1_WheelCounts2
 *
 * @ingroup ECU_DATALOGGER_2
 * @{
 */

/**
 * Message DataLogger1 configuration tuple.
 */
#define MSG_DataLogger1                             0x1f0a005, 1, 8

/**
 * Message DataLogger1 id.
 */
#define ID_DataLogger1                              0x1f0a005

/**
 * Message DataLogger1 extended id bit.
 */
#define EXT_DataLogger1                             1

/**
 * Message DataLogger1 Data Length Count.
 */
#define DLC_DataLogger1                             8

/**
 * Message DataLogger1 cycle time.
 */
#define CYCLE_DataLogger1                           20

/**
 * Message DataLogger1 fast cycle time.
 */
#define FAST_DataLogger1                            0

/**
 * Initialise message DataLogger1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_DataLogger1(buf) { \
	INITSIG_DataLogger1_WheelCounts1(buf); \
	INITSIG_DataLogger1_WheelCounts2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_DataLogger0 Message DataLogger0 (0x1f0a004)
 *
 * Sent by \ref ECU_DATALOGGER.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_DataLogger0_RadiatorFlow
 * - \ref SIG_DataLogger0_CGAccelRawY
 * - \ref SIG_DataLogger0_CGGyroscope
 * - \ref SIG_DataLogger0_CGAccelRawZ
 * - \ref SIG_DataLogger0_CGAccelRawX
 *
 * @ingroup ECU_DATALOGGER
 * @{
 */

/**
 * Message DataLogger0 configuration tuple.
 */
#define MSG_DataLogger0                             0x1f0a004, 1, 8

/**
 * Message DataLogger0 id.
 */
#define ID_DataLogger0                              0x1f0a004

/**
 * Message DataLogger0 extended id bit.
 */
#define EXT_DataLogger0                             1

/**
 * Message DataLogger0 Data Length Count.
 */
#define DLC_DataLogger0                             8

/**
 * Message DataLogger0 cycle time.
 */
#define CYCLE_DataLogger0                           20

/**
 * Message DataLogger0 fast cycle time.
 */
#define FAST_DataLogger0                            0

/**
 * Initialise message DataLogger0 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_DataLogger0(buf) { \
	INITSIG_DataLogger0_RadiatorFlow(buf); \
	INITSIG_DataLogger0_CGAccelRawY(buf); \
	INITSIG_DataLogger0_CGGyroscope(buf); \
	INITSIG_DataLogger0_CGAccelRawZ(buf); \
	INITSIG_DataLogger0_CGAccelRawX(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_AEMEngine3 Message AEMEngine3 (0x1f0a003)
 *
 * Sent by \ref ECU_AEM_EMS_4.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_AEMEngine3_ECUBatteryVoltage
 * - \ref SIG_AEMEngine3_IgnitionTiming
 * - \ref SIG_AEMEngine3_GearPosCalculated
 * - \ref SIG_AEMEngine3_VehicleSpeed
 * - \ref SIG_AEMEngine3_AFR1
 *
 * @ingroup ECU_AEM_EMS_4
 * @{
 */

/**
 * Message AEMEngine3 configuration tuple.
 */
#define MSG_AEMEngine3                              0x1f0a003, 1, 8

/**
 * Message AEMEngine3 id.
 */
#define ID_AEMEngine3                               0x1f0a003

/**
 * Message AEMEngine3 extended id bit.
 */
#define EXT_AEMEngine3                              1

/**
 * Message AEMEngine3 Data Length Count.
 */
#define DLC_AEMEngine3                              8

/**
 * Message AEMEngine3 cycle time.
 */
#define CYCLE_AEMEngine3                            20

/**
 * Message AEMEngine3 fast cycle time.
 */
#define FAST_AEMEngine3                             0

/**
 * Initialise message AEMEngine3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_AEMEngine3(buf) { \
	INITSIG_AEMEngine3_ECUBatteryVoltage(buf); \
	INITSIG_AEMEngine3_IgnitionTiming(buf); \
	INITSIG_AEMEngine3_GearPosCalculated(buf); \
	INITSIG_AEMEngine3_VehicleSpeed(buf); \
	INITSIG_AEMEngine3_AFR1(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_AEMEngine2 Message AEMEngine2 (0x1f0a002)
 *
 * Sent by \ref ECU_AEM_EMS_4.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_AEMEngine2_ECUBatteryVoltage
 * - \ref SIG_AEMEngine2_RestrictorPressure
 * - \ref SIG_AEMEngine2_ECU_GPIO6_Voltage
 * - \ref SIG_AEMEngine2_ECU_GPIO3_Voltage
 *
 * @ingroup ECU_AEM_EMS_4
 * @{
 */

/**
 * Message AEMEngine2 configuration tuple.
 */
#define MSG_AEMEngine2                              0x1f0a002, 1, 8

/**
 * Message AEMEngine2 id.
 */
#define ID_AEMEngine2                               0x1f0a002

/**
 * Message AEMEngine2 extended id bit.
 */
#define EXT_AEMEngine2                              1

/**
 * Message AEMEngine2 Data Length Count.
 */
#define DLC_AEMEngine2                              8

/**
 * Message AEMEngine2 cycle time.
 */
#define CYCLE_AEMEngine2                            16

/**
 * Message AEMEngine2 fast cycle time.
 */
#define FAST_AEMEngine2                             0

/**
 * Initialise message AEMEngine2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_AEMEngine2(buf) { \
	INITSIG_AEMEngine2_ECUBatteryVoltage(buf); \
	INITSIG_AEMEngine2_RestrictorPressure(buf); \
	INITSIG_AEMEngine2_ECU_GPIO6_Voltage(buf); \
	INITSIG_AEMEngine2_ECU_GPIO3_Voltage(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_AEMEngine1 Message AEMEngine1 (0x1f0a001)
 *
 * Sent by \ref ECU_AEM_EMS_4.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_AEMEngine1_ECU_GPIO1_Voltage
 * - \ref SIG_AEMEngine1_RadiatorBottomTemp
 * - \ref SIG_AEMEngine1_RadiatorTopTemp
 * - \ref SIG_AEMEngine1_ECU_GPIO2_Voltage
 *
 * @ingroup ECU_AEM_EMS_4
 * @{
 */

/**
 * Message AEMEngine1 configuration tuple.
 */
#define MSG_AEMEngine1                              0x1f0a001, 1, 8

/**
 * Message AEMEngine1 id.
 */
#define ID_AEMEngine1                               0x1f0a001

/**
 * Message AEMEngine1 extended id bit.
 */
#define EXT_AEMEngine1                              1

/**
 * Message AEMEngine1 Data Length Count.
 */
#define DLC_AEMEngine1                              8

/**
 * Message AEMEngine1 cycle time.
 */
#define CYCLE_AEMEngine1                            16

/**
 * Message AEMEngine1 fast cycle time.
 */
#define FAST_AEMEngine1                             0

/**
 * Initialise message AEMEngine1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_AEMEngine1(buf) { \
	INITSIG_AEMEngine1_ECU_GPIO1_Voltage(buf); \
	INITSIG_AEMEngine1_RadiatorBottomTemp(buf); \
	INITSIG_AEMEngine1_RadiatorTopTemp(buf); \
	INITSIG_AEMEngine1_ECU_GPIO2_Voltage(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_AEMEngine0 Message AEMEngine0 (0x1f0a000)
 *
 * Sent by \ref ECU_AEM_EMS_4.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_AEMEngine0_CoolantTemp
 * - \ref SIG_AEMEngine0_IntakeManifoldAirTemp
 * - \ref SIG_AEMEngine0_ThrottlePos
 * - \ref SIG_AEMEngine0_EngineLoad
 * - \ref SIG_AEMEngine0_EngineSpeed
 *
 * @ingroup ECU_AEM_EMS_4
 * @{
 */

/**
 * Message AEMEngine0 configuration tuple.
 */
#define MSG_AEMEngine0                              0x1f0a000, 1, 8

/**
 * Message AEMEngine0 id.
 */
#define ID_AEMEngine0                               0x1f0a000

/**
 * Message AEMEngine0 extended id bit.
 */
#define EXT_AEMEngine0                              1

/**
 * Message AEMEngine0 Data Length Count.
 */
#define DLC_AEMEngine0                              8

/**
 * Message AEMEngine0 cycle time.
 */
#define CYCLE_AEMEngine0                            16

/**
 * Message AEMEngine0 fast cycle time.
 */
#define FAST_AEMEngine0                             0

/**
 * Initialise message AEMEngine0 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_AEMEngine0(buf) { \
	INITSIG_AEMEngine0_CoolantTemp(buf); \
	INITSIG_AEMEngine0_IntakeManifoldAirTemp(buf); \
	INITSIG_AEMEngine0_ThrottlePos(buf); \
	INITSIG_AEMEngine0_EngineLoad(buf); \
	INITSIG_AEMEngine0_EngineSpeed(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger3_Analog1 Signal Analog1 of Message DataLogger3 (0x1f0a006)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger3
 * @{
 */

/**
 * Signal Analog1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger3_Analog1 and \ref GET_DataLogger3_Analog1 instead.
 */
#define SIG_DataLogger3_Analog1                     1, 0, 7, 10

/**
 * Signal Analog1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger3_Analog1 or \ref INIT_DataLogger3 instead.
 */
#define SETUP_DataLogger3_Analog1                   1, 0, 7, 10, 0

/**
 * Get signal Analog1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger3_Analog1(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 2) \
	| (ubyte)(+(ubyte)((buf[1] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Analog1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger3_Analog1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 2) & 0xff) << 0; \
	buf[1] &= ~(0x03 << 6); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Analog1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger3_Analog1(buf) \
	SET_DataLogger3_Analog1(buf, 0)

/**
 * Signal Analog1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger3_Analog1(x, fmt) \
	((x) * fmt * 5 / 1024)

/**
 * Signal Analog1 raw initial value.
 */
#define START_DataLogger3_Analog1                   0

/**
 * Signal Analog1 raw minimum value.
 */
#define MIN_DataLogger3_Analog1                     0

/**
 * Signal Analog1 raw maximum value.
 */
#define MAX_DataLogger3_Analog1                     1023

/**
 * Signal Analog1 raw offset value.
 */
#define OFF_DataLogger3_Analog1                     0

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger3_Analog2 Signal Analog2 of Message DataLogger3 (0x1f0a006)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger3
 * @{
 */

/**
 * Signal Analog2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger3_Analog2 and \ref GET_DataLogger3_Analog2 instead.
 */
#define SIG_DataLogger3_Analog2                     1, 0, 13, 10

/**
 * Signal Analog2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger3_Analog2 or \ref INIT_DataLogger3 instead.
 */
#define SETUP_DataLogger3_Analog2                   1, 0, 13, 10, 0

/**
 * Get signal Analog2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger3_Analog2(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0x3f) << 4) \
	| (ubyte)(+(ubyte)((buf[2] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Analog2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger3_Analog2(buf, val) { \
	buf[1] &= ~(0x3f << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 4) & 0x3f) << 0; \
	buf[2] &= ~(0x0f << 4); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Analog2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger3_Analog2(buf) \
	SET_DataLogger3_Analog2(buf, 0)

/**
 * Signal Analog2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger3_Analog2(x, fmt) \
	((x) * fmt * 5 / 1024)

/**
 * Signal Analog2 raw initial value.
 */
#define START_DataLogger3_Analog2                   0

/**
 * Signal Analog2 raw minimum value.
 */
#define MIN_DataLogger3_Analog2                     0

/**
 * Signal Analog2 raw maximum value.
 */
#define MAX_DataLogger3_Analog2                     1023

/**
 * Signal Analog2 raw offset value.
 */
#define OFF_DataLogger3_Analog2                     0

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger3_Analog3 Signal Analog3 of Message DataLogger3 (0x1f0a006)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger3
 * @{
 */

/**
 * Signal Analog3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger3_Analog3 and \ref GET_DataLogger3_Analog3 instead.
 */
#define SIG_DataLogger3_Analog3                     1, 0, 19, 10

/**
 * Signal Analog3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger3_Analog3 or \ref INIT_DataLogger3 instead.
 */
#define SETUP_DataLogger3_Analog3                   1, 0, 19, 10, 0

/**
 * Get signal Analog3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger3_Analog3(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[3] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Analog3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger3_Analog3(buf, val) { \
	buf[2] &= ~(0x0f << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Analog3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger3_Analog3(buf) \
	SET_DataLogger3_Analog3(buf, 0)

/**
 * Signal Analog3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger3_Analog3(x, fmt) \
	((x) * fmt * 5 / 1024)

/**
 * Signal Analog3 raw initial value.
 */
#define START_DataLogger3_Analog3                   0

/**
 * Signal Analog3 raw minimum value.
 */
#define MIN_DataLogger3_Analog3                     0

/**
 * Signal Analog3 raw maximum value.
 */
#define MAX_DataLogger3_Analog3                     1023

/**
 * Signal Analog3 raw offset value.
 */
#define OFF_DataLogger3_Analog3                     0

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger3_Analog4 Signal Analog4 of Message DataLogger3 (0x1f0a006)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger3
 * @{
 */

/**
 * Signal Analog4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger3_Analog4 and \ref GET_DataLogger3_Analog4 instead.
 */
#define SIG_DataLogger3_Analog4                     1, 0, 25, 10

/**
 * Signal Analog4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger3_Analog4 or \ref INIT_DataLogger3 instead.
 */
#define SETUP_DataLogger3_Analog4                   1, 0, 25, 10, 0

/**
 * Get signal Analog4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger3_Analog4(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Analog4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger3_Analog4(buf, val) { \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Analog4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger3_Analog4(buf) \
	SET_DataLogger3_Analog4(buf, 0)

/**
 * Signal Analog4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger3_Analog4(x, fmt) \
	((x) * fmt * 5 / 1024)

/**
 * Signal Analog4 raw initial value.
 */
#define START_DataLogger3_Analog4                   0

/**
 * Signal Analog4 raw minimum value.
 */
#define MIN_DataLogger3_Analog4                     0

/**
 * Signal Analog4 raw maximum value.
 */
#define MAX_DataLogger3_Analog4                     1023

/**
 * Signal Analog4 raw offset value.
 */
#define OFF_DataLogger3_Analog4                     0

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger3_Analog5 Signal Analog5 of Message DataLogger3 (0x1f0a006)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger3
 * @{
 */

/**
 * Signal Analog5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger3_Analog5 and \ref GET_DataLogger3_Analog5 instead.
 */
#define SIG_DataLogger3_Analog5                     1, 0, 47, 10

/**
 * Signal Analog5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger3_Analog5 or \ref INIT_DataLogger3 instead.
 */
#define SETUP_DataLogger3_Analog5                   1, 0, 47, 10, 0

/**
 * Get signal Analog5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger3_Analog5(buf) (0 \
	| (uword)(+(uword)((buf[5] >> 0) & 0xff) << 2) \
	| (ubyte)(+(ubyte)((buf[6] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Analog5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger3_Analog5(buf, val) { \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 2) & 0xff) << 0; \
	buf[6] &= ~(0x03 << 6); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Analog5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger3_Analog5(buf) \
	SET_DataLogger3_Analog5(buf, 0)

/**
 * Signal Analog5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger3_Analog5(x, fmt) \
	((x) * fmt * 5 / 1024)

/**
 * Signal Analog5 raw initial value.
 */
#define START_DataLogger3_Analog5                   0

/**
 * Signal Analog5 raw minimum value.
 */
#define MIN_DataLogger3_Analog5                     0

/**
 * Signal Analog5 raw maximum value.
 */
#define MAX_DataLogger3_Analog5                     1023

/**
 * Signal Analog5 raw offset value.
 */
#define OFF_DataLogger3_Analog5                     0

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger3_Analog6 Signal Analog6 of Message DataLogger3 (0x1f0a006)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger3
 * @{
 */

/**
 * Signal Analog6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger3_Analog6 and \ref GET_DataLogger3_Analog6 instead.
 */
#define SIG_DataLogger3_Analog6                     1, 0, 53, 10

/**
 * Signal Analog6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger3_Analog6 or \ref INIT_DataLogger3 instead.
 */
#define SETUP_DataLogger3_Analog6                   1, 0, 53, 10, 0

/**
 * Get signal Analog6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger3_Analog6(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0x3f) << 4) \
	| (ubyte)(+(ubyte)((buf[7] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Analog6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger3_Analog6(buf, val) { \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 4) & 0x3f) << 0; \
	buf[7] &= ~(0x0f << 4); \
	buf[7] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Analog6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger3_Analog6(buf) \
	SET_DataLogger3_Analog6(buf, 0)

/**
 * Signal Analog6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger3_Analog6(x, fmt) \
	((x) * fmt * 5 / 1024)

/**
 * Signal Analog6 raw initial value.
 */
#define START_DataLogger3_Analog6                   0

/**
 * Signal Analog6 raw minimum value.
 */
#define MIN_DataLogger3_Analog6                     0

/**
 * Signal Analog6 raw maximum value.
 */
#define MAX_DataLogger3_Analog6                     1023

/**
 * Signal Analog6 raw offset value.
 */
#define OFF_DataLogger3_Analog6                     0

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger1_WheelCounts1 Signal WheelCounts1 of Message DataLogger1 (0x1f0a005)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger1
 * @{
 */

/**
 * Signal WheelCounts1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger1_WheelCounts1 and \ref GET_DataLogger1_WheelCounts1 instead.
 */
#define SIG_DataLogger1_WheelCounts1                1, 0, 7, 16

/**
 * Signal WheelCounts1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger1_WheelCounts1 or \ref INIT_DataLogger1 instead.
 */
#define SETUP_DataLogger1_WheelCounts1              1, 0, 7, 16, 0

/**
 * Get signal WheelCounts1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger1_WheelCounts1(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal WheelCounts1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger1_WheelCounts1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal WheelCounts1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger1_WheelCounts1(buf) \
	SET_DataLogger1_WheelCounts1(buf, 0)

/**
 * Signal WheelCounts1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger1_WheelCounts1(x, fmt) \
	((x) * fmt)

/**
 * Signal WheelCounts1 raw initial value.
 */
#define START_DataLogger1_WheelCounts1              0

/**
 * Signal WheelCounts1 raw minimum value.
 */
#define MIN_DataLogger1_WheelCounts1                0

/**
 * Signal WheelCounts1 raw maximum value.
 */
#define MAX_DataLogger1_WheelCounts1                65535

/**
 * Signal WheelCounts1 raw offset value.
 */
#define OFF_DataLogger1_WheelCounts1                0

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger1_WheelCounts2 Signal WheelCounts2 of Message DataLogger1 (0x1f0a005)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger1
 * @{
 */

/**
 * Signal WheelCounts2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger1_WheelCounts2 and \ref GET_DataLogger1_WheelCounts2 instead.
 */
#define SIG_DataLogger1_WheelCounts2                1, 0, 23, 16

/**
 * Signal WheelCounts2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger1_WheelCounts2 or \ref INIT_DataLogger1 instead.
 */
#define SETUP_DataLogger1_WheelCounts2              1, 0, 23, 16, 0

/**
 * Get signal WheelCounts2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger1_WheelCounts2(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal WheelCounts2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger1_WheelCounts2(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal WheelCounts2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger1_WheelCounts2(buf) \
	SET_DataLogger1_WheelCounts2(buf, 0)

/**
 * Signal WheelCounts2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger1_WheelCounts2(x, fmt) \
	((x) * fmt)

/**
 * Signal WheelCounts2 raw initial value.
 */
#define START_DataLogger1_WheelCounts2              0

/**
 * Signal WheelCounts2 raw minimum value.
 */
#define MIN_DataLogger1_WheelCounts2                0

/**
 * Signal WheelCounts2 raw maximum value.
 */
#define MAX_DataLogger1_WheelCounts2                65535

/**
 * Signal WheelCounts2 raw offset value.
 */
#define OFF_DataLogger1_WheelCounts2                0

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger0_RadiatorFlow Signal RadiatorFlow of Message DataLogger0 (0x1f0a004)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger0
 * @{
 */

/**
 * Signal RadiatorFlow configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger0_RadiatorFlow and \ref GET_DataLogger0_RadiatorFlow instead.
 */
#define SIG_DataLogger0_RadiatorFlow                1, 0, 7, 16

/**
 * Signal RadiatorFlow setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger0_RadiatorFlow or \ref INIT_DataLogger0 instead.
 */
#define SETUP_DataLogger0_RadiatorFlow              1, 0, 7, 16, 0

/**
 * Get signal RadiatorFlow from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger0_RadiatorFlow(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RadiatorFlow in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger0_RadiatorFlow(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RadiatorFlow in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger0_RadiatorFlow(buf) \
	SET_DataLogger0_RadiatorFlow(buf, 0)

/**
 * Signal RadiatorFlow value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger0_RadiatorFlow(x, fmt) \
	((x) * fmt * 20 / 11)

/**
 * Signal RadiatorFlow raw initial value.
 */
#define START_DataLogger0_RadiatorFlow              0

/**
 * Signal RadiatorFlow raw minimum value.
 */
#define MIN_DataLogger0_RadiatorFlow                0

/**
 * Signal RadiatorFlow raw maximum value.
 */
#define MAX_DataLogger0_RadiatorFlow                65535

/**
 * Signal RadiatorFlow raw offset value.
 */
#define OFF_DataLogger0_RadiatorFlow                0

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger0_CGAccelRawY Signal CGAccelRawY of Message DataLogger0 (0x1f0a004)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger0
 * @{
 */

/**
 * Signal CGAccelRawY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger0_CGAccelRawY and \ref GET_DataLogger0_CGAccelRawY instead.
 */
#define SIG_DataLogger0_CGAccelRawY                 1, 0, 23, 10

/**
 * Signal CGAccelRawY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger0_CGAccelRawY or \ref INIT_DataLogger0 instead.
 */
#define SETUP_DataLogger0_CGAccelRawY               1, 0, 23, 10, 0

/**
 * Get signal CGAccelRawY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger0_CGAccelRawY(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 2) \
	| (ubyte)(+(ubyte)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal CGAccelRawY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger0_CGAccelRawY(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal CGAccelRawY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger0_CGAccelRawY(buf) \
	SET_DataLogger0_CGAccelRawY(buf, 0)

/**
 * Signal CGAccelRawY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger0_CGAccelRawY(x, fmt) \
	((x) * fmt * 25 / 2048 + fmt * 4096 / (-659))

/**
 * Signal CGAccelRawY raw initial value.
 */
#define START_DataLogger0_CGAccelRawY               0

/**
 * Signal CGAccelRawY raw minimum value.
 */
#define MIN_DataLogger0_CGAccelRawY                 99

/**
 * Signal CGAccelRawY raw maximum value.
 */
#define MAX_DataLogger0_CGAccelRawY                 918

/**
 * Signal CGAccelRawY raw offset value.
 */
#define OFF_DataLogger0_CGAccelRawY                 -509

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger0_CGGyroscope Signal CGGyroscope of Message DataLogger0 (0x1f0a004)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger0
 * @{
 */

/**
 * Signal CGGyroscope configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger0_CGGyroscope and \ref GET_DataLogger0_CGGyroscope instead.
 */
#define SIG_DataLogger0_CGGyroscope                 1, 0, 29, 10

/**
 * Signal CGGyroscope setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger0_CGGyroscope or \ref INIT_DataLogger0 instead.
 */
#define SETUP_DataLogger0_CGGyroscope               1, 0, 29, 10, 0

/**
 * Get signal CGGyroscope from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger0_CGGyroscope(buf) (0 \
	| (uword)(+(uword)((buf[3] >> 0) & 0x3f) << 4) \
	| (ubyte)(+(ubyte)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal CGGyroscope in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger0_CGGyroscope(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal CGGyroscope in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger0_CGGyroscope(buf) \
	SET_DataLogger0_CGGyroscope(buf, 0)

/**
 * Signal CGGyroscope value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger0_CGGyroscope(x, fmt) \
	((x) * fmt * 1999 / 16384 + fmt * 32768 / (-518))

/**
 * Signal CGGyroscope raw initial value.
 */
#define START_DataLogger0_CGGyroscope               0

/**
 * Signal CGGyroscope raw minimum value.
 */
#define MIN_DataLogger0_CGGyroscope                 108

/**
 * Signal CGGyroscope raw maximum value.
 */
#define MAX_DataLogger0_CGGyroscope                 927

/**
 * Signal CGGyroscope raw offset value.
 */
#define OFF_DataLogger0_CGGyroscope                 -518

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger0_CGAccelRawZ Signal CGAccelRawZ of Message DataLogger0 (0x1f0a004)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger0
 * @{
 */

/**
 * Signal CGAccelRawZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger0_CGAccelRawZ and \ref GET_DataLogger0_CGAccelRawZ instead.
 */
#define SIG_DataLogger0_CGAccelRawZ                 1, 0, 35, 10

/**
 * Signal CGAccelRawZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger0_CGAccelRawZ or \ref INIT_DataLogger0 instead.
 */
#define SETUP_DataLogger0_CGAccelRawZ               1, 0, 35, 10, 0

/**
 * Get signal CGAccelRawZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger0_CGAccelRawZ(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0x0f) << 6) \
	| (ubyte)(+(ubyte)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal CGAccelRawZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger0_CGAccelRawZ(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal CGAccelRawZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger0_CGAccelRawZ(buf) \
	SET_DataLogger0_CGAccelRawZ(buf, 0)

/**
 * Signal CGAccelRawZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger0_CGAccelRawZ(x, fmt) \
	((x) * fmt * 25 / 2048 + fmt * 4096 / (-659))

/**
 * Signal CGAccelRawZ raw initial value.
 */
#define START_DataLogger0_CGAccelRawZ               0

/**
 * Signal CGAccelRawZ raw minimum value.
 */
#define MIN_DataLogger0_CGAccelRawZ                 99

/**
 * Signal CGAccelRawZ raw maximum value.
 */
#define MAX_DataLogger0_CGAccelRawZ                 918

/**
 * Signal CGAccelRawZ raw offset value.
 */
#define OFF_DataLogger0_CGAccelRawZ                 -509

/**
 * @}
 */

/**
 * @defgroup SIG_DataLogger0_CGAccelRawX Signal CGAccelRawX of Message DataLogger0 (0x1f0a004)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_DataLogger0
 * @{
 */

/**
 * Signal CGAccelRawX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_DataLogger0_CGAccelRawX and \ref GET_DataLogger0_CGAccelRawX instead.
 */
#define SIG_DataLogger0_CGAccelRawX                 1, 0, 41, 10

/**
 * Signal CGAccelRawX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_DataLogger0_CGAccelRawX or \ref INIT_DataLogger0 instead.
 */
#define SETUP_DataLogger0_CGAccelRawX               1, 0, 41, 10, 0

/**
 * Get signal CGAccelRawX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_DataLogger0_CGAccelRawX(buf) (0 \
	| (uword)(+(uword)((buf[5] >> 0) & 0x03) << 8) \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal CGAccelRawX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_DataLogger0_CGAccelRawX(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal CGAccelRawX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_DataLogger0_CGAccelRawX(buf) \
	SET_DataLogger0_CGAccelRawX(buf, 0)

/**
 * Signal CGAccelRawX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_DataLogger0_CGAccelRawX(x, fmt) \
	((x) * fmt * 25 / 2048 + fmt * 4096 / (-659))

/**
 * Signal CGAccelRawX raw initial value.
 */
#define START_DataLogger0_CGAccelRawX               0

/**
 * Signal CGAccelRawX raw minimum value.
 */
#define MIN_DataLogger0_CGAccelRawX                 99

/**
 * Signal CGAccelRawX raw maximum value.
 */
#define MAX_DataLogger0_CGAccelRawX                 918

/**
 * Signal CGAccelRawX raw offset value.
 */
#define OFF_DataLogger0_CGAccelRawX                 -509

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_ECUBatteryVoltage Signal ECUBatteryVoltage of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal ECUBatteryVoltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_ECUBatteryVoltage and \ref GET_AEMEngine3_ECUBatteryVoltage instead.
 */
#define SIG_AEMEngine3_ECUBatteryVoltage            1, 0, 55, 16

/**
 * Signal ECUBatteryVoltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_ECUBatteryVoltage or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_ECUBatteryVoltage          1, 0, 55, 16, 0

/**
 * Get signal ECUBatteryVoltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_ECUBatteryVoltage(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECUBatteryVoltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_ECUBatteryVoltage(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECUBatteryVoltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_ECUBatteryVoltage(buf) \
	SET_AEMEngine3_ECUBatteryVoltage(buf, 0)

/**
 * Signal ECUBatteryVoltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_ECUBatteryVoltage(x, fmt) \
	((x) * fmt / 4096)

/**
 * Signal ECUBatteryVoltage raw initial value.
 */
#define START_AEMEngine3_ECUBatteryVoltage          0

/**
 * Signal ECUBatteryVoltage raw minimum value.
 */
#define MIN_AEMEngine3_ECUBatteryVoltage            0

/**
 * Signal ECUBatteryVoltage raw maximum value.
 */
#define MAX_AEMEngine3_ECUBatteryVoltage            65536

/**
 * Signal ECUBatteryVoltage raw offset value.
 */
#define OFF_AEMEngine3_ECUBatteryVoltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_IgnitionTiming Signal IgnitionTiming of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal IgnitionTiming configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_IgnitionTiming and \ref GET_AEMEngine3_IgnitionTiming instead.
 */
#define SIG_AEMEngine3_IgnitionTiming               1, 0, 47, 8

/**
 * Signal IgnitionTiming setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_IgnitionTiming or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_IgnitionTiming             1, 0, 47, 8, 0

/**
 * Get signal IgnitionTiming from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_IgnitionTiming(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal IgnitionTiming in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_IgnitionTiming(buf, val) { \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal IgnitionTiming in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_IgnitionTiming(buf) \
	SET_AEMEngine3_IgnitionTiming(buf, 0)

/**
 * Signal IgnitionTiming value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_IgnitionTiming(x, fmt) \
	((x) * fmt * 8789 / 25000 + fmt * (-17))

/**
 * Signal IgnitionTiming raw initial value.
 */
#define START_AEMEngine3_IgnitionTiming             0

/**
 * Signal IgnitionTiming raw minimum value.
 */
#define MIN_AEMEngine3_IgnitionTiming               0

/**
 * Signal IgnitionTiming raw maximum value.
 */
#define MAX_AEMEngine3_IgnitionTiming               255

/**
 * Signal IgnitionTiming raw offset value.
 */
#define OFF_AEMEngine3_IgnitionTiming               -48

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_GearPosCalculated Signal GearPosCalculated of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal GearPosCalculated configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_GearPosCalculated and \ref GET_AEMEngine3_GearPosCalculated instead.
 */
#define SIG_AEMEngine3_GearPosCalculated            1, 0, 39, 8

/**
 * Signal GearPosCalculated setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_GearPosCalculated or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_GearPosCalculated          1, 0, 39, 8, 0

/**
 * Get signal GearPosCalculated from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_GearPosCalculated(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GearPosCalculated in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_GearPosCalculated(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GearPosCalculated in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_GearPosCalculated(buf) \
	SET_AEMEngine3_GearPosCalculated(buf, 0)

/**
 * Signal GearPosCalculated value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_GearPosCalculated(x, fmt) \
	((x) * fmt)

/**
 * Signal GearPosCalculated raw initial value.
 */
#define START_AEMEngine3_GearPosCalculated          0

/**
 * Signal GearPosCalculated raw minimum value.
 */
#define MIN_AEMEngine3_GearPosCalculated            0

/**
 * Signal GearPosCalculated raw maximum value.
 */
#define MAX_AEMEngine3_GearPosCalculated            255

/**
 * Signal GearPosCalculated raw offset value.
 */
#define OFF_AEMEngine3_GearPosCalculated            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_VehicleSpeed Signal VehicleSpeed of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal VehicleSpeed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_VehicleSpeed and \ref GET_AEMEngine3_VehicleSpeed instead.
 */
#define SIG_AEMEngine3_VehicleSpeed                 1, 0, 23, 16

/**
 * Signal VehicleSpeed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_VehicleSpeed or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_VehicleSpeed               1, 0, 23, 16, 0

/**
 * Get signal VehicleSpeed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_VehicleSpeed(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VehicleSpeed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_VehicleSpeed(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VehicleSpeed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_VehicleSpeed(buf) \
	SET_AEMEngine3_VehicleSpeed(buf, 0)

/**
 * Signal VehicleSpeed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_VehicleSpeed(x, fmt) \
	((x) * fmt / 256)

/**
 * Signal VehicleSpeed raw initial value.
 */
#define START_AEMEngine3_VehicleSpeed               0

/**
 * Signal VehicleSpeed raw minimum value.
 */
#define MIN_AEMEngine3_VehicleSpeed                 0

/**
 * Signal VehicleSpeed raw maximum value.
 */
#define MAX_AEMEngine3_VehicleSpeed                 65535

/**
 * Signal VehicleSpeed raw offset value.
 */
#define OFF_AEMEngine3_VehicleSpeed                 0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine3_AFR1 Signal AFR1 of Message AEMEngine3 (0x1f0a003)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine3
 * @{
 */

/**
 * Signal AFR1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine3_AFR1 and \ref GET_AEMEngine3_AFR1 instead.
 */
#define SIG_AEMEngine3_AFR1                         1, 0, 7, 8

/**
 * Signal AFR1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine3_AFR1 or \ref INIT_AEMEngine3 instead.
 */
#define SETUP_AEMEngine3_AFR1                       1, 0, 7, 8, 0

/**
 * Get signal AFR1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine3_AFR1(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal AFR1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine3_AFR1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal AFR1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine3_AFR1(buf) \
	SET_AEMEngine3_AFR1(buf, 0)

/**
 * Signal AFR1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine3_AFR1(x, fmt) \
	((x) * fmt * 500 / 8737 + fmt * 293 / 40)

/**
 * Signal AFR1 raw initial value.
 */
#define START_AEMEngine3_AFR1                       0

/**
 * Signal AFR1 raw minimum value.
 */
#define MIN_AEMEngine3_AFR1                         0

/**
 * Signal AFR1 raw maximum value.
 */
#define MAX_AEMEngine3_AFR1                         255

/**
 * Signal AFR1 raw offset value.
 */
#define OFF_AEMEngine3_AFR1                         128

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine2_ECUBatteryVoltage Signal ECUBatteryVoltage of Message AEMEngine2 (0x1f0a002)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine2
 * @{
 */

/**
 * Signal ECUBatteryVoltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine2_ECUBatteryVoltage and \ref GET_AEMEngine2_ECUBatteryVoltage instead.
 */
#define SIG_AEMEngine2_ECUBatteryVoltage            1, 0, 55, 16

/**
 * Signal ECUBatteryVoltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine2_ECUBatteryVoltage or \ref INIT_AEMEngine2 instead.
 */
#define SETUP_AEMEngine2_ECUBatteryVoltage          1, 0, 55, 16, 0

/**
 * Get signal ECUBatteryVoltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine2_ECUBatteryVoltage(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECUBatteryVoltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine2_ECUBatteryVoltage(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECUBatteryVoltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine2_ECUBatteryVoltage(buf) \
	SET_AEMEngine2_ECUBatteryVoltage(buf, 0)

/**
 * Signal ECUBatteryVoltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine2_ECUBatteryVoltage(x, fmt) \
	((x) * fmt / 3125)

/**
 * Signal ECUBatteryVoltage raw initial value.
 */
#define START_AEMEngine2_ECUBatteryVoltage          0

/**
 * Signal ECUBatteryVoltage raw minimum value.
 */
#define MIN_AEMEngine2_ECUBatteryVoltage            0

/**
 * Signal ECUBatteryVoltage raw maximum value.
 */
#define MAX_AEMEngine2_ECUBatteryVoltage            65535

/**
 * Signal ECUBatteryVoltage raw offset value.
 */
#define OFF_AEMEngine2_ECUBatteryVoltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine2_RestrictorPressure Signal RestrictorPressure of Message AEMEngine2 (0x1f0a002)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine2
 * @{
 */

/**
 * Signal RestrictorPressure configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine2_RestrictorPressure and \ref GET_AEMEngine2_RestrictorPressure instead.
 */
#define SIG_AEMEngine2_RestrictorPressure           1, 0, 39, 16

/**
 * Signal RestrictorPressure setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine2_RestrictorPressure or \ref INIT_AEMEngine2 instead.
 */
#define SETUP_AEMEngine2_RestrictorPressure         1, 0, 39, 16, 0

/**
 * Get signal RestrictorPressure from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine2_RestrictorPressure(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RestrictorPressure in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine2_RestrictorPressure(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RestrictorPressure in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine2_RestrictorPressure(buf) \
	SET_AEMEngine2_RestrictorPressure(buf, 0)

/**
 * Signal RestrictorPressure value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine2_RestrictorPressure(x, fmt) \
	((x) * fmt * 51 / 32768)

/**
 * Signal RestrictorPressure raw initial value.
 */
#define START_AEMEngine2_RestrictorPressure         0

/**
 * Signal RestrictorPressure raw minimum value.
 */
#define MIN_AEMEngine2_RestrictorPressure           0

/**
 * Signal RestrictorPressure raw maximum value.
 */
#define MAX_AEMEngine2_RestrictorPressure           64251

/**
 * Signal RestrictorPressure raw offset value.
 */
#define OFF_AEMEngine2_RestrictorPressure           0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine2_ECU_GPIO6_Voltage Signal ECU_GPIO6_Voltage of Message AEMEngine2 (0x1f0a002)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine2
 * @{
 */

/**
 * Signal ECU_GPIO6_Voltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine2_ECU_GPIO6_Voltage and \ref GET_AEMEngine2_ECU_GPIO6_Voltage instead.
 */
#define SIG_AEMEngine2_ECU_GPIO6_Voltage            1, 0, 23, 16

/**
 * Signal ECU_GPIO6_Voltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine2_ECU_GPIO6_Voltage or \ref INIT_AEMEngine2 instead.
 */
#define SETUP_AEMEngine2_ECU_GPIO6_Voltage          1, 0, 23, 16, 0

/**
 * Get signal ECU_GPIO6_Voltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine2_ECU_GPIO6_Voltage(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECU_GPIO6_Voltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine2_ECU_GPIO6_Voltage(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECU_GPIO6_Voltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine2_ECU_GPIO6_Voltage(buf) \
	SET_AEMEngine2_ECU_GPIO6_Voltage(buf, 0)

/**
 * Signal ECU_GPIO6_Voltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine2_ECU_GPIO6_Voltage(x, fmt) \
	((x) * fmt * 0)

/**
 * Signal ECU_GPIO6_Voltage raw initial value.
 */
#define START_AEMEngine2_ECU_GPIO6_Voltage          0

/**
 * Signal ECU_GPIO6_Voltage raw minimum value.
 */
#define MIN_AEMEngine2_ECU_GPIO6_Voltage            0

/**
 * Signal ECU_GPIO6_Voltage raw maximum value.
 */
#define MAX_AEMEngine2_ECU_GPIO6_Voltage            65535

/**
 * Signal ECU_GPIO6_Voltage raw offset value.
 */
#define OFF_AEMEngine2_ECU_GPIO6_Voltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine2_ECU_GPIO3_Voltage Signal ECU_GPIO3_Voltage of Message AEMEngine2 (0x1f0a002)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine2
 * @{
 */

/**
 * Signal ECU_GPIO3_Voltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine2_ECU_GPIO3_Voltage and \ref GET_AEMEngine2_ECU_GPIO3_Voltage instead.
 */
#define SIG_AEMEngine2_ECU_GPIO3_Voltage            1, 0, 7, 16

/**
 * Signal ECU_GPIO3_Voltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine2_ECU_GPIO3_Voltage or \ref INIT_AEMEngine2 instead.
 */
#define SETUP_AEMEngine2_ECU_GPIO3_Voltage          1, 0, 7, 16, 0

/**
 * Get signal ECU_GPIO3_Voltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine2_ECU_GPIO3_Voltage(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECU_GPIO3_Voltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine2_ECU_GPIO3_Voltage(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECU_GPIO3_Voltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine2_ECU_GPIO3_Voltage(buf) \
	SET_AEMEngine2_ECU_GPIO3_Voltage(buf, 0)

/**
 * Signal ECU_GPIO3_Voltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine2_ECU_GPIO3_Voltage(x, fmt) \
	((x) * fmt * 0)

/**
 * Signal ECU_GPIO3_Voltage raw initial value.
 */
#define START_AEMEngine2_ECU_GPIO3_Voltage          0

/**
 * Signal ECU_GPIO3_Voltage raw minimum value.
 */
#define MIN_AEMEngine2_ECU_GPIO3_Voltage            0

/**
 * Signal ECU_GPIO3_Voltage raw maximum value.
 */
#define MAX_AEMEngine2_ECU_GPIO3_Voltage            65535

/**
 * Signal ECU_GPIO3_Voltage raw offset value.
 */
#define OFF_AEMEngine2_ECU_GPIO3_Voltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine1_ECU_GPIO1_Voltage Signal ECU_GPIO1_Voltage of Message AEMEngine1 (0x1f0a001)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine1
 * @{
 */

/**
 * Signal ECU_GPIO1_Voltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine1_ECU_GPIO1_Voltage and \ref GET_AEMEngine1_ECU_GPIO1_Voltage instead.
 */
#define SIG_AEMEngine1_ECU_GPIO1_Voltage            1, 0, 55, 16

/**
 * Signal ECU_GPIO1_Voltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine1_ECU_GPIO1_Voltage or \ref INIT_AEMEngine1 instead.
 */
#define SETUP_AEMEngine1_ECU_GPIO1_Voltage          1, 0, 55, 16, 0

/**
 * Get signal ECU_GPIO1_Voltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine1_ECU_GPIO1_Voltage(buf) (0 \
	| (uword)(+(uword)((buf[6] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECU_GPIO1_Voltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine1_ECU_GPIO1_Voltage(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECU_GPIO1_Voltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine1_ECU_GPIO1_Voltage(buf) \
	SET_AEMEngine1_ECU_GPIO1_Voltage(buf, 0)

/**
 * Signal ECU_GPIO1_Voltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine1_ECU_GPIO1_Voltage(x, fmt) \
	((x) * fmt * 0)

/**
 * Signal ECU_GPIO1_Voltage raw initial value.
 */
#define START_AEMEngine1_ECU_GPIO1_Voltage          0

/**
 * Signal ECU_GPIO1_Voltage raw minimum value.
 */
#define MIN_AEMEngine1_ECU_GPIO1_Voltage            0

/**
 * Signal ECU_GPIO1_Voltage raw maximum value.
 */
#define MAX_AEMEngine1_ECU_GPIO1_Voltage            65535

/**
 * Signal ECU_GPIO1_Voltage raw offset value.
 */
#define OFF_AEMEngine1_ECU_GPIO1_Voltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine1_RadiatorBottomTemp Signal RadiatorBottomTemp of Message AEMEngine1 (0x1f0a001)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine1
 * @{
 */

/**
 * Signal RadiatorBottomTemp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine1_RadiatorBottomTemp and \ref GET_AEMEngine1_RadiatorBottomTemp instead.
 */
#define SIG_AEMEngine1_RadiatorBottomTemp           1, 0, 39, 16

/**
 * Signal RadiatorBottomTemp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine1_RadiatorBottomTemp or \ref INIT_AEMEngine1 instead.
 */
#define SETUP_AEMEngine1_RadiatorBottomTemp         1, 0, 39, 16, 0

/**
 * Get signal RadiatorBottomTemp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine1_RadiatorBottomTemp(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RadiatorBottomTemp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine1_RadiatorBottomTemp(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RadiatorBottomTemp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine1_RadiatorBottomTemp(buf) \
	SET_AEMEngine1_RadiatorBottomTemp(buf, 0)

/**
 * Signal RadiatorBottomTemp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine1_RadiatorBottomTemp(x, fmt) \
	((x) * fmt * (-337) / 32768 + fmt * 16384 / 43)

/**
 * Signal RadiatorBottomTemp raw initial value.
 */
#define START_AEMEngine1_RadiatorBottomTemp         0

/**
 * Signal RadiatorBottomTemp raw minimum value.
 */
#define MIN_AEMEngine1_RadiatorBottomTemp           42573

/**
 * Signal RadiatorBottomTemp raw maximum value.
 */
#define MAX_AEMEngine1_RadiatorBottomTemp           7620

/**
 * Signal RadiatorBottomTemp raw offset value.
 */
#define OFF_AEMEngine1_RadiatorBottomTemp           -36941

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine1_RadiatorTopTemp Signal RadiatorTopTemp of Message AEMEngine1 (0x1f0a001)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine1
 * @{
 */

/**
 * Signal RadiatorTopTemp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine1_RadiatorTopTemp and \ref GET_AEMEngine1_RadiatorTopTemp instead.
 */
#define SIG_AEMEngine1_RadiatorTopTemp              1, 0, 23, 16

/**
 * Signal RadiatorTopTemp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine1_RadiatorTopTemp or \ref INIT_AEMEngine1 instead.
 */
#define SETUP_AEMEngine1_RadiatorTopTemp            1, 0, 23, 16, 0

/**
 * Get signal RadiatorTopTemp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine1_RadiatorTopTemp(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RadiatorTopTemp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine1_RadiatorTopTemp(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RadiatorTopTemp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine1_RadiatorTopTemp(buf) \
	SET_AEMEngine1_RadiatorTopTemp(buf, 0)

/**
 * Signal RadiatorTopTemp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine1_RadiatorTopTemp(x, fmt) \
	((x) * fmt * (-337) / 32768 + fmt * 16384 / 43)

/**
 * Signal RadiatorTopTemp raw initial value.
 */
#define START_AEMEngine1_RadiatorTopTemp            0

/**
 * Signal RadiatorTopTemp raw minimum value.
 */
#define MIN_AEMEngine1_RadiatorTopTemp              42573

/**
 * Signal RadiatorTopTemp raw maximum value.
 */
#define MAX_AEMEngine1_RadiatorTopTemp              7620

/**
 * Signal RadiatorTopTemp raw offset value.
 */
#define OFF_AEMEngine1_RadiatorTopTemp              -36941

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine1_ECU_GPIO2_Voltage Signal ECU_GPIO2_Voltage of Message AEMEngine1 (0x1f0a001)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine1
 * @{
 */

/**
 * Signal ECU_GPIO2_Voltage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine1_ECU_GPIO2_Voltage and \ref GET_AEMEngine1_ECU_GPIO2_Voltage instead.
 */
#define SIG_AEMEngine1_ECU_GPIO2_Voltage            1, 0, 7, 16

/**
 * Signal ECU_GPIO2_Voltage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine1_ECU_GPIO2_Voltage or \ref INIT_AEMEngine1 instead.
 */
#define SETUP_AEMEngine1_ECU_GPIO2_Voltage          1, 0, 7, 16, 0

/**
 * Get signal ECU_GPIO2_Voltage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine1_ECU_GPIO2_Voltage(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ECU_GPIO2_Voltage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine1_ECU_GPIO2_Voltage(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ECU_GPIO2_Voltage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine1_ECU_GPIO2_Voltage(buf) \
	SET_AEMEngine1_ECU_GPIO2_Voltage(buf, 0)

/**
 * Signal ECU_GPIO2_Voltage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine1_ECU_GPIO2_Voltage(x, fmt) \
	((x) * fmt * 0)

/**
 * Signal ECU_GPIO2_Voltage raw initial value.
 */
#define START_AEMEngine1_ECU_GPIO2_Voltage          0

/**
 * Signal ECU_GPIO2_Voltage raw minimum value.
 */
#define MIN_AEMEngine1_ECU_GPIO2_Voltage            0

/**
 * Signal ECU_GPIO2_Voltage raw maximum value.
 */
#define MAX_AEMEngine1_ECU_GPIO2_Voltage            65535

/**
 * Signal ECU_GPIO2_Voltage raw offset value.
 */
#define OFF_AEMEngine1_ECU_GPIO2_Voltage            0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_CoolantTemp Signal CoolantTemp of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal CoolantTemp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_CoolantTemp and \ref GET_AEMEngine0_CoolantTemp instead.
 */
#define SIG_AEMEngine0_CoolantTemp                  1, 1, 63, 8

/**
 * Signal CoolantTemp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_CoolantTemp or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_CoolantTemp                1, 1, 63, 8, 0

/**
 * Get signal CoolantTemp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_CoolantTemp(buf) (0 \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal CoolantTemp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_CoolantTemp(buf, val) { \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal CoolantTemp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_CoolantTemp(buf) \
	SET_AEMEngine0_CoolantTemp(buf, 0)

/**
 * Signal CoolantTemp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_CoolantTemp(x, fmt) \
	((x) * fmt * 9 / 5 + fmt * 32)

/**
 * Signal CoolantTemp raw initial value.
 */
#define START_AEMEngine0_CoolantTemp                0

/**
 * Signal CoolantTemp raw minimum value.
 */
#define MIN_AEMEngine0_CoolantTemp                  -128

/**
 * Signal CoolantTemp raw maximum value.
 */
#define MAX_AEMEngine0_CoolantTemp                  127

/**
 * Signal CoolantTemp raw offset value.
 */
#define OFF_AEMEngine0_CoolantTemp                  18

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_IntakeManifoldAirTemp Signal IntakeManifoldAirTemp of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal IntakeManifoldAirTemp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_IntakeManifoldAirTemp and \ref GET_AEMEngine0_IntakeManifoldAirTemp instead.
 */
#define SIG_AEMEngine0_IntakeManifoldAirTemp        1, 1, 55, 8

/**
 * Signal IntakeManifoldAirTemp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_IntakeManifoldAirTemp or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_IntakeManifoldAirTemp      1, 1, 55, 8, 0

/**
 * Get signal IntakeManifoldAirTemp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_IntakeManifoldAirTemp(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal IntakeManifoldAirTemp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_IntakeManifoldAirTemp(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal IntakeManifoldAirTemp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_IntakeManifoldAirTemp(buf) \
	SET_AEMEngine0_IntakeManifoldAirTemp(buf, 0)

/**
 * Signal IntakeManifoldAirTemp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_IntakeManifoldAirTemp(x, fmt) \
	((x) * fmt * 9 / 5 + fmt * 32)

/**
 * Signal IntakeManifoldAirTemp raw initial value.
 */
#define START_AEMEngine0_IntakeManifoldAirTemp      0

/**
 * Signal IntakeManifoldAirTemp raw minimum value.
 */
#define MIN_AEMEngine0_IntakeManifoldAirTemp        -128

/**
 * Signal IntakeManifoldAirTemp raw maximum value.
 */
#define MAX_AEMEngine0_IntakeManifoldAirTemp        127

/**
 * Signal IntakeManifoldAirTemp raw offset value.
 */
#define OFF_AEMEngine0_IntakeManifoldAirTemp        18

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_ThrottlePos Signal ThrottlePos of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal ThrottlePos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_ThrottlePos and \ref GET_AEMEngine0_ThrottlePos instead.
 */
#define SIG_AEMEngine0_ThrottlePos                  1, 0, 39, 16

/**
 * Signal ThrottlePos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_ThrottlePos or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_ThrottlePos                1, 0, 39, 16, 0

/**
 * Get signal ThrottlePos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_ThrottlePos(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ThrottlePos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_ThrottlePos(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ThrottlePos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_ThrottlePos(buf) \
	SET_AEMEngine0_ThrottlePos(buf, 0)

/**
 * Signal ThrottlePos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_ThrottlePos(x, fmt) \
	((x) * fmt * 25 / 16384)

/**
 * Signal ThrottlePos raw initial value.
 */
#define START_AEMEngine0_ThrottlePos                0

/**
 * Signal ThrottlePos raw minimum value.
 */
#define MIN_AEMEngine0_ThrottlePos                  0

/**
 * Signal ThrottlePos raw maximum value.
 */
#define MAX_AEMEngine0_ThrottlePos                  65535

/**
 * Signal ThrottlePos raw offset value.
 */
#define OFF_AEMEngine0_ThrottlePos                  0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_EngineLoad Signal EngineLoad of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal EngineLoad configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_EngineLoad and \ref GET_AEMEngine0_EngineLoad instead.
 */
#define SIG_AEMEngine0_EngineLoad                   1, 0, 23, 16

/**
 * Signal EngineLoad setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_EngineLoad or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_EngineLoad                 1, 0, 23, 16, 0

/**
 * Get signal EngineLoad from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_EngineLoad(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal EngineLoad in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_EngineLoad(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal EngineLoad in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_EngineLoad(buf) \
	SET_AEMEngine0_EngineLoad(buf, 0)

/**
 * Signal EngineLoad value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_EngineLoad(x, fmt) \
	((x) * fmt * 25 / 16384)

/**
 * Signal EngineLoad raw initial value.
 */
#define START_AEMEngine0_EngineLoad                 0

/**
 * Signal EngineLoad raw minimum value.
 */
#define MIN_AEMEngine0_EngineLoad                   0

/**
 * Signal EngineLoad raw maximum value.
 */
#define MAX_AEMEngine0_EngineLoad                   65534

/**
 * Signal EngineLoad raw offset value.
 */
#define OFF_AEMEngine0_EngineLoad                   0

/**
 * @}
 */

/**
 * @defgroup SIG_AEMEngine0_EngineSpeed Signal EngineSpeed of Message AEMEngine0 (0x1f0a000)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_AEMEngine0
 * @{
 */

/**
 * Signal EngineSpeed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_AEMEngine0_EngineSpeed and \ref GET_AEMEngine0_EngineSpeed instead.
 */
#define SIG_AEMEngine0_EngineSpeed                  1, 0, 7, 16

/**
 * Signal EngineSpeed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_AEMEngine0_EngineSpeed or \ref INIT_AEMEngine0 instead.
 */
#define SETUP_AEMEngine0_EngineSpeed                1, 0, 7, 16, 0

/**
 * Get signal EngineSpeed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_AEMEngine0_EngineSpeed(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal EngineSpeed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_AEMEngine0_EngineSpeed(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal EngineSpeed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_AEMEngine0_EngineSpeed(buf) \
	SET_AEMEngine0_EngineSpeed(buf, 0)

/**
 * Signal EngineSpeed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_AEMEngine0_EngineSpeed(x, fmt) \
	((x) * fmt * 25 / 64)

/**
 * Signal EngineSpeed raw initial value.
 */
#define START_AEMEngine0_EngineSpeed                0

/**
 * Signal EngineSpeed raw minimum value.
 */
#define MIN_AEMEngine0_EngineSpeed                  0

/**
 * Signal EngineSpeed raw maximum value.
 */
#define MAX_AEMEngine0_EngineSpeed                  65535

/**
 * Signal EngineSpeed raw offset value.
 */
#define OFF_AEMEngine0_EngineSpeed                  0

/**
 * @}
 */

